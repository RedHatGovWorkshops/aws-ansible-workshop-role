---
#---------------------------------------------------
#  VPC
#---------------------------------------------------
- name: Create a AWS VPC with a public subnet
  ec2_vpc_net:
    name:        "{{ vpc_name }}"
    region:      "{{ aws_region }}"
    cidr_block:  "{{ cidr_block }}"
    dns_support: true
    tags:        "{{ vpc_resource_tags }}"    
  register: vpc
  tags:
    - vpc_create

- name: debug module.
  debug: 
    var: vpc

- set_fact:
      aws_vpc_id: "{{ vpc.vpc.id }}"

- name: debug module.
  debug: 
    var: aws_vpc_id

#---------------------------------------------------
#  Create Subnet
#---------------------------------------------------
- name: Create subnet 
  ec2_vpc_subnet:
    state:  present
    cidr:   10.0.0.0/20
    vpc_id: "{{ aws_vpc_id }}"
    az:     "{{ az }}"
    region: "{{ aws_region }}"
    tags:   "{{ subnet_resource_tags }}"    
  register: subnet
  tags:
    - vpc_create

- set_fact:
      aws_subnet_id: "{{ subnet.subnet.id }}"

#---------------------------------------------------
#  IGW
#---------------------------------------------------
- name: Create IGW
  ec2_vpc_igw:
    state:  present
    vpc_id: "{{ aws_vpc_id }}"
    region: "{{ aws_region }}"
    tags: "{{ igw_resource_tags }}"
  register: igw
  tags:
    - vpc_create

- name: debug module.
  debug: 
    var: igw

- set_fact:
      aws_igw_id: "{{ igw.gateway_id }}"

#---------------------------------------------------
#  Route Table
#---------------------------------------------------
- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ aws_vpc_id }}"
    region: "{{ aws_region }}"
    tags:   "{{ route_resource_tags }}"
    subnets:
      - "{{ aws_subnet_id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ aws_igw_id }}"
  register: rt

- name: debug module.
  debug: 
    var: rt

- set_fact:
      route_table_id: "{{ rt }}"

#---------------------------------------------------
#  Security Groups
#---------------------------------------------------
- name: Security group
  ec2_group:
    description: EC2 security group
    name:   "{{ sg_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    region: "{{ aws_region }}"
    tags: "{{ sg_resource_tags }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 0.0.0.0/0
  register: sg

#---------------------------------------------------
#  Tower Instances
#---------------------------------------------------
- name: Create Tower instances
  ec2:
    wait: yes
    region:           "{{ aws_region }}"
    image:            "{{ ec2_ami }}"
    key_name:         "{{ ec2_keypair }}"
    group_id:         "{{ sg.group_id }}"
    instance_type:    "{{ ec2_tower_type }}"
    assign_public_ip: "{{ ec2_public_ip }}"
    vpc_subnet_id:    "{{ aws_subnet_id }}"
    instance_tags:    "{{ ec2_tower_tag }}"
    exact_count:      "{{ ec2_tower_exact_count }}"    
    count_tag:
      Name:           "{{ workshop_prefix + '-tower' }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 15
        delete_on_termination: true
  register: tower

# These next two tasks build a list of instances regardless of whether or
# not they're getting created in this run, or if they already exist.
- set_fact:
    tower_instances:  "{{ tower.instances }}"
  when: tower.instances is defined and tower.instances

- set_fact:
    tower_instances: "{{ tower.tagged_instances }}"
  when: tower.tagged_instances is defined and tower.tagged_instances

- name: Create Route 53 Tower entries
  route53:
    command: create
    zone: "{{ r53_zone }}"
    record: "{{ workshop_prefix }}.tower.{{ item[0] }}.{{ r53_zone }}"
    type: A
    ttl: 300
    value: "{{ item[1].public_ip }}"
    overwrite: yes
    wait: yes
  with_indexed_items: "{{ tower_instances }}"

#---------------------------------------------------
#  Node Instances
#---------------------------------------------------
- name: Launch EC2 Node Instance
  ec2:
    wait: yes
    region:           "{{ aws_region }}"
    image:            "{{ ec2_ami }}"
    key_name:         "{{ ec2_keypair }}"
    group_id:         "{{ sg.group_id }}"
    instance_type:    "{{ ec2_node_type }}"
    assign_public_ip: "{{ ec2_public_ip }}"
    vpc_subnet_id:    "{{ aws_subnet_id }}"
    instance_tags:    "{{ ec2_node_tag }}"
    exact_count:      "{{ ec2_node_exact_count }}"    
    count_tag:
      Name:           "{{ workshop_prefix + '-node' }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 15
        delete_on_termination: true
  register: node

# These next two tasks build a list of instances regardless of whether or
# not they're getting created in this run, or if they already exist.
- set_fact:
    node_instances:  "{{ node.instances }}"
  when: node.instances is defined and node.instances

- set_fact:
    node_instances: "{{ node.tagged_instances }}"
  when: node.tagged_instances is defined and node.tagged_instances

- name: Create Route 53 Node entries
  route53:
    command: create
    zone:   "{{ r53_zone }}"
    record: "{{ workshop_prefix }}.node.{{ item[0] }}.{{ r53_zone }}"
    type: A
    ttl: 300
    value:  "{{ item[1].public_ip }}"
    overwrite: yes
    wait: yes
  with_indexed_items: "{{ node_instances }}"

- name: Add tower inventory
  command: tower-cli inventory create --tower-host public.sector.tower.redhatgov.io \
                                      --tower-username  {{ tower_username }} \
                                      --tower-password  {{ tower_password }} \
                                      --name            {{ workshop_prefix }}-inventory \
                                      --description     {{ workshop_prefix }}-inventory \
                                      --organization    {{ tower_organization }}

- name: Create Inventory Instance Filters                                   
  command: tower-cli inventory_source create --tower-host public.sector.tower.redhatgov.io \
                                             --tower-username  {{ tower_username }} \
                                             --tower-password  {{ tower_password }} \
                                             --name            {{ workshop_prefix }}-instance-filter \
                                             --inventory       {{ workshop_prefix }}-inventory \
                                             --source             ec2 \
                                             --credential      {{ aws_credential }} \
                                             --instance-filters  "tag:DeleteTag={{ workshop_prefix }}-{{ owner_email }}"
- name: Create Tower Group
  command: tower-cli group create --tower-host public.sector.tower.redhatgov.io \
                                  --tower-username   {{ tower_username }} \
                                  --tower-password   {{ tower_password }} \
                                  --name             {{ workshop_prefix }}-tower \
                                  --inventory        {{ workshop_prefix }}-inventory

- name: Create Node Group
  command: tower-cli group create --tower-host public.sector.tower.redhatgov.io \
                                  --tower-username   {{ tower_username }} \
                                  --tower-password   {{ tower_password }} \
                                  --name             {{ workshop_prefix }}-node \
                                  --inventory        {{ workshop_prefix }}-inventory

- name: Add new Tower instance to inventory -> group
  add_host:
    name:     "{{ item.public_ip }}"
    groups:   "{{ workshop_prefix }}-tower"
  with_items: "{{ tower.instances }}"

- name:  Add new Node instance to inventory -> group
  add_host:
    name:     "{{ item.public_ip }}"
    groups:   "{{ workshop_prefix }}-node"
  with_items: "{{ node.instances }}"